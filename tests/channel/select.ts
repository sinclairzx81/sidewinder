import { Channel, Select } from '@sidewinder/channel'
import { Assert } from '../assert/index'

describe('channel/Select', () => {
  it('Should select on single channel', () => {
    const channel = new Channel()
    Select([channel])
  })

  it('Should select on multiple channels', () => {
    const channel0 = new Channel()
    const channel1 = new Channel()
    Select([channel0, channel1])
  })

  it('Should receive select from single channel', async () => {
    const channel = new Channel()
    const select = Select([channel])
    channel.send(0)
    channel.send(1)
    channel.send(2)
    channel.send(3)
    channel.end()
    const value0 = await select.next()
    const value1 = await select.next()
    const value2 = await select.next()
    const value3 = await select.next()
    const eof = await select.next()
    Assert.equal(value0, 0)
    Assert.equal(value1, 1)
    Assert.equal(value2, 2)
    Assert.equal(value3, 3)
    Assert.equal(eof, null)
  })

  it('Should receive select from multiple channels', async () => {
    const channel0 = new Channel()
    const channel1 = new Channel()
    const channel2 = new Channel()
    const channel3 = new Channel()
    const select = Select([channel0, channel1, channel2, channel3])
    channel0.send(0)
    channel1.send(1)
    channel2.send(2)
    channel3.send(3)

    channel0.send(4)
    channel1.send(5)
    channel2.send(6)
    channel3.send(7)

    channel0.end()
    channel1.end()
    channel2.end()
    channel3.end()
    const value0 = await select.next()
    const value1 = await select.next()
    const value2 = await select.next()
    const value3 = await select.next()
    const value4 = await select.next()
    const value5 = await select.next()
    const value6 = await select.next()
    const value7 = await select.next()
    const eof = await select.next()
    Assert.equal(value0, 0)
    Assert.equal(value1, 1)
    Assert.equal(value2, 2)
    Assert.equal(value3, 3)
    Assert.equal(value4, 4)
    Assert.equal(value5, 5)
    Assert.equal(value6, 6)
    Assert.equal(value7, 7)
    Assert.equal(eof, null)
  })

  it('Should timeout if one of multiple channels never ends', async () => {
    const channel0 = new Channel()
    const channel1 = new Channel()
    const channel2 = new Channel()
    const channel3 = new Channel()
    const select = Select([channel0, channel1, channel2, channel3])
    channel0.send(0)
    channel1.send(1)
    channel2.send(2)
    channel3.send(3)

    channel0.send(4)
    channel1.send(5)
    channel2.send(6)
    channel3.send(7)

    channel0.end()
    channel1.end()
    channel2.end()
    // channel3.end() no end
    await select.next()
    await select.next()
    await select.next()
    await select.next()
    await select.next()
    await select.next()
    await select.next()
    await select.next()
    await Assert.timeout(async () => await select.next(), 200)
  })

  it('Should throw if single channel errors', async () => {
    const channel = new Channel()
    const select = Select([channel])
    channel.send(0)
    channel.send(1)
    channel.error(new Error('error'))
    const value0 = await select.next()
    const value1 = await select.next()
    const value2 = await select.next().catch((error) => error)
    Assert.equal(value0, 0)
    Assert.equal(value1, 1)
    Assert.isInstanceOf(value2, Error)
  })

  it('Should throw if one of multiple channels errors', async () => {
    const channel0 = new Channel()
    const channel1 = new Channel()
    const select = Select([channel0, channel1])
    channel0.send(0)
    channel1.send(1)
    channel0.error(new Error('error'))
    const value0 = await select.next()
    const value1 = await select.next()
    const value2 = await select.next().catch((error) => error)
    Assert.equal(value0, 0)
    Assert.equal(value1, 1)
    Assert.isInstanceOf(value2, Error)
  })
})
